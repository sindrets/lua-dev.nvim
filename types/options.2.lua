--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- boolean	(default off)
-- 			global
-- 	When on, ":autocmd", shell and write commands are not allowed in
-- 	".nvimrc" and ".exrc" in the current directory and map commands are
-- 	displayed.  Switch it off only if you know that you will not run into
-- 	problems, or when the 'exrc' option is off.  On Unix this option is
-- 	only used if the ".nvimrc" or ".exrc" is not owned by you.  This can be
-- 	dangerous if the systems allows users to do a "chown".  You better set
-- 	'secure' at the end of your |init.vim| then.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.secure = "false"
-- string	(default: "@,161-255")
-- 			global
-- 	The characters given by this option are displayed directly on the
-- 	screen.  It is also used for "\p" in a |pattern|.  The characters from
-- 	space (ASCII 32) to '~' (ASCII 126) are always displayed directly,
-- 	even when they are not included in 'isprint' or excluded.  See
-- 	'isfname' for a description of the format of this option.
vim.o.isprint = "@,161-255"
-- boolean	(default on)
-- 			global
-- 	Insert two spaces after a '.', '?' and '!' with a join command.
-- 	Otherwise only one space is inserted.
vim.o.joinspaces = "false"
-- string	(default "")
-- 			global
-- 	List of words that change the behavior of the |jumplist|.
-- 	  stack         Make the jumplist behave like the tagstack or like a
-- 	                web browser.  Relative location of entries in the
-- 			jumplist is preserved at the cost of discarding
-- 			subsequent entries when navigating backwards in the
-- 			jumplist and then jumping to a location.
-- 			|jumplist-stack|
vim.o.jumpoptions = ""
-- string	(default "")
-- 			global
-- 	List of comma separated words, which enable special things that keys
-- 	can do.  These values can be used:
-- 	   startsel	Using a shifted special key starts selection (either
-- 			Select mode or Visual mode, depending on "key" being
-- 			present in 'selectmode').
-- 	   stopsel	Using a not-shifted special key stops selection.
-- 	Special keys in this context are the cursor keys, <End>, <Home>,
-- 	<PageUp> and <PageDown>.
-- 	The 'keymodel' option is set by the |:behave| command.
vim.o.keymodel = ""
-- string	(default ":Man", Windows: ":help")
-- 			global or local to buffer |global-local|
-- 	Program to use for the |K| command.  Environment variables are
-- 	expanded |:set_env|.  ":help" may be used to access the Vim internal
-- 	help.  (Note that previously setting the global option to the empty
-- 	value did this, which is now deprecated.)
-- 	When the first character is ":", the command is invoked as a Vim
-- 	command prefixed with [count].
-- 	When "man" or "man -s" is used, Vim will automatically translate
-- 	a [count] for the "K" command to a section number.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	Example: >
-- 		:set keywordprg=man\ -s
-- 		:set keywordprg=:Man
-- <	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.keywordprg = ":Man"
-- string	(default: "")
-- 			global
-- 	When non-empty, overrides the file name used for |shada| (viminfo).
-- 	When equal to "NONE" no shada file will be read or written.
-- 	This option can be set with the |-i| command line flag.  The |--clean|
-- 	command line flag sets it to "NONE".
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shadafile = ""
-- string	(default $SHELL or "sh",
-- 					Windows: "cmd.exe")
-- 			global
-- 	Name of the shell to use for ! and :! commands.  When changing the
-- 	value also check these options: 'shellpipe', 'shellslash'
-- 	'shellredir', 'shellquote', 'shellxquote' and 'shellcmdflag'.
-- 	It is allowed to give an argument to the command, e.g.  "csh -f".
-- 	See |option-backslash| about including spaces and backslashes.
-- 	Environment variables are expanded |:set_env|.
-- 	If the name of the shell contains a space, you might need to enclose
-- 	it in quotes.  Example: >
-- 		:set shell=\"c:\program\ files\unix\sh.exe\"\ -f
-- <	Note the backslash before each quote (to avoid starting a comment) and
-- 	each space (to avoid ending the option value), so better use |:let-&|
-- 	like this: >
-- 		:let &shell='"C:\Program Files\unix\sh.exe" -f'
-- <	Also note that the "-f" is not inside the quotes, because it is not
-- 	part of the command name.
-- 							*shell-unquoting*
-- 	Rules regarding quotes:
-- 	1. Option is split on space and tab characters that are not inside
-- 	   quotes: "abc def" runs shell named "abc" with additional argument
-- 	   "def", '"abc def"' runs shell named "abc def" with no additional
-- 	   arguments (here and below: additional means “additional to
-- 	   'shellcmdflag'”).
-- 	2. Quotes in option may be present in any position and any number:
-- 	   '"abc"', '"a"bc', 'a"b"c', 'ab"c"' and '"a"b"c"' are all equivalent
-- 	   to just "abc".
-- 	3. Inside quotes backslash preceding backslash means one backslash.
-- 	   Backslash preceding quote means one quote. Backslash preceding
-- 	   anything else means backslash and next character literally:
-- 	   '"a\\b"' is the same as "a\b", '"a\\"b"' runs shell named literally
-- 	   'a"b', '"a\b"' is the same as "a\b" again.
-- 	4. Outside of quotes backslash always means itself, it cannot be used
-- 	   to escape quote: 'a\"b"' is the same as "a\b".
-- 	Note that such processing is done after |:set| did its own round of
-- 	unescaping, so to keep yourself sane use |:let-&| like shown above.
-- 							*shell-powershell*
-- 	To use powershell: >
-- 		let &shell = has('win32') ? 'powershell' : 'pwsh'
-- 		set shellquote= shellpipe=\| shellxquote=
-- 		set shellcmdflag=-NoLogo\ -NoProfile\ -ExecutionPolicy\ RemoteSigned\ -Command
-- 		set shellredir=\|\ Out-File\ -Encoding\ UTF8
vim.o.shell = "/bin/zsh"
-- string	(default "")
-- 			global
-- 	Language to use for menu translation.  Tells which file is loaded
-- 	from the "lang" directory in 'runtimepath': >
-- 		"lang/menu_" . &langmenu . ".vim"
-- <	(without the spaces).  For example, to always use the Dutch menus, no
-- 	matter what $LANG is set to: >
-- 		:set langmenu=nl_NL.ISO_8859-1
-- <	When 'langmenu' is empty, |v:lang| is used.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
-- 	If your $LANG is set to a non-English language but you do want to use
-- 	the English menus: >
-- 		:set langmenu=none
-- <	This option must be set before loading menus, switching on filetype
-- 	detection or syntax highlighting.  Once the menus are defined setting
-- 	this option has no effect.  But you could do this: >
-- 		:source $VIMRUNTIME/delmenu.vim
-- 		:set langmenu=de_DE.ISO_8859-1
-- 		:source $VIMRUNTIME/menu.vim
-- <	Warning: This deletes all menus that you defined yourself!
vim.o.langmenu = ""
-- string	(default: "-c"; Windows: "/s /c")
-- 			global
-- 	Flag passed to the shell to execute "!" and ":!" commands; e.g.,
-- 	`bash.exe -c ls` or `cmd.exe /s /c "dir"`.  For Windows
-- 	systems, the default is set according to the value of 'shell', to
-- 	reduce the need to set this option by the user.
-- 	On Unix it can have more than one flag.  Each white space separated
-- 	part is passed as an argument to the shell command.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	See |shell-unquoting| which talks about separating this option into
-- 	multiple arguments.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellcmdflag = "-c"
-- boolean (default off, set in |defaults.vim|)
-- 			global
-- 			{only available when compiled with the |+langmap|
-- 			feature}
-- 	This is just like 'langremap' but with the value inverted.  It only
-- 	exists for backwards compatibility.  When setting 'langremap' then
-- 	'langnoremap' is set to the inverted value, and the other way around.
vim.o.langnoremap = "true"
-- boolean (default off)
-- 			global
-- 	When off, setting 'langmap' does not apply to characters resulting from
-- 	a mapping.  If setting 'langmap' disables some of your mappings, make
-- 	sure this option is off.
vim.o.langremap = "false"
-- number	(default 2)
-- 			global
-- 	The value of this option influences when the last window will have a
-- 	status line:
-- 		0: never
-- 		1: only if there are at least two windows
-- 		2: always
-- 	The screen looks nicer with a status line if you have several
-- 	windows, but it takes another screen line. |status-line|
vim.o.laststatus = "2"
-- string	(default: ""; Windows, when 'shell'
-- 					contains "sh" somewhere: "\"")
-- 			global
-- 	Quoting character(s), put around the command passed to the shell, for
-- 	the "!" and ":!" commands.  The redirection is kept outside of the
-- 	quoting.  See 'shellxquote' to include the redirection.  It's
-- 	probably not useful to set both options.
-- 	This is an empty string by default.  Only known to be useful for
-- 	third-party shells on Windows systems, such as the MKS Korn Shell
-- 	or bash, where it should be "\"".  The default is adjusted according
-- 	the value of 'shell', to reduce the need to set this option by the
-- 	user.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellquote = ""
-- string	(default ">", ">&" or ">%s 2>&1")
-- 			global
-- 	String to be used to put the output of a filter command in a temporary
-- 	file.  See also |:!|.  See |option-backslash| about including spaces
-- 	and backslashes.
-- 	The name of the temporary file can be represented by "%s" if necessary
-- 	(the file name is appended automatically if no %s appears in the value
-- 	of this option).
-- 	The default is ">".  For Unix, if the 'shell' option is "csh", "tcsh"
-- 	or "zsh" during initializations, the default becomes ">&".  If the
-- 	'shell' option is "sh", "ksh" or "bash" the default becomes
-- 	">%s 2>&1".  This means that stderr is also included.
-- 	For Win32, the Unix checks are done and additionally "cmd" is checked
-- 	for, which makes the default ">%s 2>&1".  Also, the same names with
-- 	".exe" appended are checked for.
-- 	The initialization of this option is done after reading the vimrc
-- 	and the other initializations, so that when the 'shell' option is set
-- 	there, the 'shellredir' option changes automatically unless it was
-- 	explicitly set before.
-- 	In the future pipes may be used for filtering and this option will
-- 	become obsolete (at least for Unix).
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellredir = ">%s 2>&1"
-- boolean	(default off)
-- 			global
-- 			{only for Windows}
-- 	When set, a forward slash is used when expanding file names.  This is
-- 	useful when a Unix-like shell is used instead of command.com or
-- 	cmd.exe.  Backward slashes can still be typed, but they are changed to
-- 	forward slashes by Vim.
-- 	Note that setting or resetting this option has no effect for some
-- 	existing file names, thus this option needs to be set before opening
-- 	any file for best results.  This might change in the future.
-- 	'shellslash' only works when a backslash can be used as a path
-- 	separator.  To test if this is so use: >
-- 		if exists('+shellslash')
-- <
-- 			*'shelltemp'* *'stmp'* *'noshelltemp'* *'nostmp'*
vim.o.shellslash = "false"
-- boolean	(Vim default on, Vi default off)
-- 			global
-- 	When on, use temp files for shell commands.  When off use a pipe.
-- 	When using a pipe is not possible temp files are used anyway.
-- 	The advantage of using a pipe is that nobody can read the temp file
-- 	and the 'shell' command does not need to support redirection.
-- 	The advantage of using a temp file is that the file type and encoding
-- 	can be detected.
-- 	The |FilterReadPre|, |FilterReadPost| and |FilterWritePre|,
-- 	|FilterWritePost| autocommands event are not triggered when
-- 	'shelltemp' is off.
-- 	|system()| does not respect this option, it always uses pipes.
vim.o.shelltemp = "true"
-- string	(default: "", Windows: "\"")
-- 			global
-- 	Quoting character(s), put around the command passed to the shell, for
-- 	the "!" and ":!" commands.  Includes the redirection.  See
-- 	'shellquote' to exclude the redirection.  It's probably not useful
-- 	to set both options.
-- 	When the value is '(' then ')' is appended. When the value is '"('
-- 	then ')"' is appended.
-- 	When the value is '(' then also see 'shellxescape'.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellxquote = ""
-- string	(default: "")
-- 			global
-- 	When 'shellxquote' is set to "(" then the characters listed in this
-- 	option will be escaped with a '^' character.  This makes it possible
-- 	to execute most external commands with cmd.exe.
vim.o.shellxescape = ""
-- boolean	(default off)
-- 			global
-- 	Like 'autowrite', but also used for commands ":edit", ":enew", ":quit",
-- 	":qall", ":exit", ":xit", ":recover" and closing the Vim window.
-- 	Setting this option also implies that Vim behaves like 'autowrite' has
-- 	been set.
vim.o.autowriteall = "false"
-- string	(default "dark")
-- 			global
-- 	When set to "dark" or "light", adjusts the default color groups for
-- 	that background type.  The |TUI| or other UI sets this on startup
-- 	(triggering |OptionSet|) if it can detect the background color.
vim.o.background = "dark"
-- string	(default "indent,eol,start")
-- 			global
-- 	Influences the working of <BS>, <Del>, CTRL-W and CTRL-U in Insert
-- 	mode.  This is a list of items, separated by commas.  Each item allows
-- 	a way to backspace over something:
-- 	value	effect	~
-- 	indent	allow backspacing over autoindent
-- 	eol	allow backspacing over line breaks (join lines)
-- 	start	allow backspacing over the start of insert; CTRL-W and CTRL-U
-- 		stop once at the start of insert.
vim.o.backspace = "indent,eol,start"
-- boolean	(default off)
-- 			global
-- 	Make a backup before overwriting a file.  Leave it around after the
-- 	file has been successfully written.  If you do not want to keep the
-- 	backup file, but you do want a backup while the file is being
-- 	written, reset this option and set the 'writebackup' option (this is
-- 	the default).  If you do not want a backup file at all reset both
-- 	options (use this if your file system is almost full).  See the
-- 	|backup-table| for more explanations.
-- 	When the 'backupskip' pattern matches, a backup is not made anyway.
-- 	When 'patchmode' is set, the backup may be renamed to become the
-- 	oldest version of a file.
vim.o.backup = "false"
-- string	(Vi default for Unix: "yes", otherwise: "auto")
-- 			global or local to buffer |global-local|
-- 	When writing a file and a backup is made, this option tells how it's
-- 	done.  This is a comma separated list of words.
vim.o.backupcopy = "auto"
-- string	(default ".,$XDG_DATA_HOME/nvim/backup")
-- 			global
-- 	List of directories for the backup file, separated with commas.
-- 	- The backup file will be created in the first directory in the list
-- 	  where this is possible.  The directory must exist, Vim will not
-- 	  create it for you.
-- 	- Empty means that no backup file will be created ('patchmode' is
-- 	  impossible!).  Writing may fail because of this.
-- 	- A directory "." means to put the backup file in the same directory
-- 	  as the edited file.
-- 	- A directory starting with "./" (or ".\" for Windows) means to
-- 	  put the backup file relative to where the edited file is.  The
-- 	  leading "." is replaced with the path name of the edited file.
-- 	  ("." inside a directory name has no special meaning).
-- 	- Spaces after the comma are ignored, other spaces are considered part
-- 	  of the directory name.  To have a space at the start of a directory
-- 	  name, precede it with a backslash.
-- 	- To include a comma in a directory name precede it with a backslash.
-- 	- A directory name may end in an '/'.
-- 	- For Unix and Win32, if a directory ends in two path separators "//",
-- 	  the swap file name will be built from the complete path to the file
-- 	  with all path separators changed to percent '%' signs. This will
-- 	  ensure file name uniqueness in the backup directory.
-- 	  On Win32, it is also possible to end with "\\".  However, When a
-- 	  separating comma is following, you must use "//", since "\\" will
-- 	  include the comma in the file name. Therefore it is recommended to
-- 	  use '//', instead of '\\'.
-- 	- Environment variables are expanded |:set_env|.
-- 	- Careful with '\' characters, type one before a space, type two to
-- 	  get one in the option (see |option-backslash|), for example: >
-- 	    :set bdir=c:\\tmp,\ dir\\,with\\,commas,\\\ dir\ with\ spaces
-- <	- For backwards compatibility with Vim version 3.0 a '>' at the start
-- 	  of the option is removed.
-- 	See also 'backup' and 'writebackup' options.
-- 	If you want to hide your backup files on Unix, consider this value: >
-- 		:set backupdir=./.backup,~/.backup,.,/tmp
-- <	You must create a ".backup" directory in each directory and in your
-- 	home directory for this to work properly.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	directories from the list.  This avoids problems when a future version
-- 	uses another default.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.backupdir = ".,/home/sindrets/.local/share/nvim/backup//"
-- string	(default "~")
-- 			global
-- 	String which is appended to a file name to make the name of the
-- 	backup file.  The default is quite unusual, because this avoids
-- 	accidentally overwriting existing files with a backup file.  You might
-- 	prefer using ".bak", but make sure that you don't have files with
-- 	".bak" that you want to keep.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.o.backupext = "~"
-- string	(default: "$TMPDIR/*,$TMP/*,$TEMP/*"
-- 				 Unix: "/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*"
-- 				 Mac: "/private/tmp/*,$TMPDIR/*,$TMP/*,$TEMP/*")
-- 			global
-- 	A list of file patterns.  When one of the patterns matches with the
-- 	name of the file which is written, no backup file is created.  Both
-- 	the specified file name and the full path name of the file are used.
-- 	The pattern is used like with |:autocmd|, see |autocmd-pattern|.
-- 	Watch out for special characters, see |option-backslash|.
-- 	When $TMPDIR, $TMP or $TEMP is not defined, it is not used for the
-- 	default value.  "/tmp/*" is only used for Unix.
vim.o.backupskip = "/tmp/*"
-- string	(default "all")
-- 			global
-- 	Specifies for which events the bell will not be rung. It is a comma
-- 	separated list of items. For each item that is present, the bell
-- 	will be silenced. This is most useful to specify specific events in
-- 	insert mode to be silenced.
vim.o.belloff = "all"
-- string	(default " ^I!@*-+;:,./?")
-- 			global
-- 	This option lets you choose which characters might cause a line
-- 	break if 'linebreak' is on.  Only works for ASCII characters.
vim.o.breakat = " \9!@*-+;:,./?"
-- string	(default: "last")
-- 			global
-- 	Which directory to use for the file browser:
-- 	   last		Use same directory as with last file browser, where a
-- 			file was opened or saved.
-- 	   buffer	Use the directory of the related buffer.
-- 	   current	Use the current directory.
-- 	   {path}	Use the specified directory
vim.o.browsedir = ""
-- string	(default: "internal,keepascii")
-- 			global
-- 	Specifies details about changing the case of letters.  It may contain
-- 	these words, separated by a comma:
-- 	internal	Use internal case mapping functions, the current
-- 			locale does not change the case mapping. When
-- 			"internal" is omitted, the towupper() and towlower()
-- 			system library functions are used when available.
-- 	keepascii	For the ASCII characters (0x00 to 0x7f) use the US
-- 			case mapping, the current locale is not effective.
-- 			This probably only matters for Turkish.
vim.o.casemap = "internal,keepascii"
vim.o.cdhome = "false"
-- string	(default: equivalent to $CDPATH or ",,")
-- 			global
-- 	This is a list of directories which will be searched when using the
-- 	|:cd| and |:lcd| commands, provided that the directory being searched
-- 	for has a relative path, not an absolute part starting with "/", "./"
-- 	or "../", the 'cdpath' option is not used then.
-- 	The 'cdpath' option's value has the same form and semantics as
-- 	|'path'|.  Also see |file-searching|.
-- 	The default value is taken from $CDPATH, with a "," prepended to look
-- 	in the current directory first.
-- 	If the default value taken from $CDPATH is not what you want, include
-- 	a modified version of the following command in your vimrc file to
-- 	override it: >
-- 	  :let &cdpath = ',' . substitute(substitute($CDPATH, '[, ]', '\\\0', 'g'), ':', ',', 'g')
-- <	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
-- 	(parts of 'cdpath' can be passed to the shell to expand file names).
vim.o.cdpath = ",,"
-- string	(Vim default: CTRL-F, Vi default: "")
-- 			global
-- 	The key used in Command-line Mode to open the command-line window.
-- 	Only non-printable keys are allowed.
-- 	The key can be specified as a single character, but it is difficult to
-- 	type.  The preferred way is to use the <> notation.  Examples: >
-- 		:exe "set cedit=\<C-Y>"
-- 		:exe "set cedit=\<Esc>"
-- <	|Nvi| also has this option, but it only uses the first character.
-- 	See |cmdwin|.
vim.o.cedit = "\6"
-- string (default "")
-- 			global
-- 	An expression that is used for character encoding conversion.  It is
-- 	evaluated when a file that is to be read or has been written has a
-- 	different encoding from what is desired.
-- 	'charconvert' is not used when the internal iconv() function is
-- 	supported and is able to do the conversion.  Using iconv() is
-- 	preferred, because it is much faster.
-- 	'charconvert' is not used when reading stdin |--|, because there is no
-- 	file to convert from.  You will have to save the text in a file first.
-- 	The expression must return zero or an empty string for success,
-- 	non-zero for failure.
-- 	See |encoding-names| for possible encoding names.
-- 	Additionally, names given in 'fileencodings' and 'fileencoding' are
-- 	used.
-- 	Conversion between "latin1", "unicode", "ucs-2", "ucs-4" and "utf-8"
-- 	is done internally by Vim, 'charconvert' is not used for this.
-- 	Also used for Unicode conversion.
-- 	Example: >
-- 		set charconvert=CharConvert()
-- 		fun CharConvert()
-- 		  system("recode "
-- 			\ . v:charconvert_from . ".." . v:charconvert_to
-- 			\ . " <" . v:fname_in . " >" v:fname_out)
-- 		  return v:shell_error
-- 		endfun
-- <	The related Vim variables are:
-- 		v:charconvert_from	name of the current encoding
-- 		v:charconvert_to	name of the desired encoding
-- 		v:fname_in		name of the input file
-- 		v:fname_out		name of the output file
-- 	Note that v:fname_in and v:fname_out will never be the same.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.charconvert = ""
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	List of file names, separated by commas, that are used to lookup words
-- 	for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should
-- 	contain a list of words.  This can be one word per line, or several
-- 	words per line, separated by non-keyword characters (white space is
-- 	preferred).  Maximum line length is 510 bytes.
vim.o.dictionary = ""
-- boolean	(default off)
-- 			global
-- 	Round indent to multiple of 'shiftwidth'.  Applies to > and <
-- 	commands.  CTRL-T and CTRL-D in Insert mode always round the indent to
-- 	a multiple of 'shiftwidth' (this is Vi compatible).
vim.o.shiftround = "false"
-- string	(default "")
-- 			global
-- 	This option is a list of comma separated names.
-- 	These names are recognized:
vim.o.clipboard = ""
-- string	(Vim default "filnxtToOF", Vi default: "S")
-- 			global
-- 	This option helps to avoid all the |hit-enter| prompts caused by file
-- 	messages, for example  with CTRL-G, and to avoid some other messages.
-- 	It is a list of flags:
-- 	 flag	meaning when present	~
-- 	  f	use "(3 of 5)" instead of "(file 3 of 5)"
-- 	  i	use "[noeol]" instead of "[Incomplete last line]"
-- 	  l	use "999L, 888C" instead of "999 lines, 888 characters"
-- 	  m	use "[+]" instead of "[Modified]"
-- 	  n	use "[New]" instead of "[New File]"
-- 	  r	use "[RO]" instead of "[readonly]"
-- 	  w	use "[w]" instead of "written" for file write message
-- 		and "[a]" instead of "appended" for ':w >> file' command
-- 	  x	use "[dos]" instead of "[dos format]", "[unix]" instead of
-- 		"[unix format]" and "[mac]" instead of "[mac format]".
-- 	  a	all of the above abbreviations
vim.o.shortmess = "filnxtToOF"
-- number	(default 7)
-- 			global
-- 	Number of screen lines to use for the command-line window. |cmdwin|
vim.o.cmdwinheight = "7"
-- string	(default "")
-- 			global
-- 	String to put at the start of lines that have been wrapped.  Useful
-- 	values are "> " or "+++ ": >
-- 		:set showbreak=>\
-- <	Note the backslash to escape the trailing space.  It's easier like
-- 	this: >
-- 		:let &showbreak = '+++ '
-- <	Only printable single-cell characters are allowed, excluding <Tab> and
-- 	comma (in a future version the comma might be used to separate the
-- 	part that is shown at the end and at the start of a line).
-- 	The |hl-NonText| highlight group determines the highlighting.
-- 	Note that tabs after the showbreak will be displayed differently.
-- 	If you want the 'showbreak' to appear in between line numbers, add the
-- 	"n" flag to 'cpoptions'.
vim.o.showbreak = ""
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	Show (partial) command in the last line of the screen.  Set this
-- 	option off if your terminal is slow.
-- 	In Visual mode the size of the selected area is shown:
-- 	- When selecting characters within a line, the number of characters.
-- 	  If the number of bytes is different it is also displayed: "2-6"
-- 	  means two characters and six bytes.
-- 	- When selecting more than one line, the number of lines.
-- 	- When selecting a block, the size in screen characters:
-- 	  {lines}x{columns}.
vim.o.showcmd = "true"
-- number	(default 80 or terminal width)
-- 			global
-- 	Number of columns of the screen.  Normally this is set by the terminal
-- 	initialization and does not have to be set by hand.
-- 	When Vim is running in the GUI or in a resizable window, setting this
-- 	option will cause the window size to be changed.  When you only want
-- 	to use the size for the GUI, put the command in your |ginit.vim| file.
-- 	When you set this option and Vim is unable to change the physical
-- 	number of columns of the display, the display may be messed up.  For
-- 	the GUI it is always possible and Vim limits the number of columns to
-- 	what fits on the screen.  You can use this command to get the widest
-- 	window possible: >
-- 		:set columns=9999
-- <	Minimum value is 12, maximum value is 10000.
vim.o.columns = "80"
-- boolean (default off)
-- 			global
-- 	When completing a word in insert mode (see |ins-completion|) from the
-- 	tags file, show both the tag name and a tidied-up form of the search
-- 	pattern (if there is one) as possible matches.  Thus, if you have
-- 	matched a C function, you can see a template for what arguments are
-- 	required (coding style permitting).
-- 	Note that this doesn't work well together with having "longest" in
-- 	'completeopt', because the completion from the search pattern may not
-- 	match the typed text.
vim.o.showfulltag = "false"
-- boolean	(default off)
-- 			global
-- 	When a bracket is inserted, briefly jump to the matching one.  The
-- 	jump is only done if the match can be seen on the screen.  The time to
-- 	show the match can be set with 'matchtime'.
-- 	A Beep is given if there is no match (no matter if the match can be
-- 	seen or not).
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
-- 	When the 'm' flag is not included in 'cpoptions', typing a character
-- 	will immediately move the cursor back to where it belongs.
-- 	See the "sm" field in 'guicursor' for setting the cursor shape and
-- 	blinking when showing the match.
-- 	The 'matchpairs' option can be used to specify the characters to show
-- 	matches for.  'rightleft' and 'revins' are used to look for opposite
-- 	matches.
-- 	Also see the matchparen plugin for highlighting the match when moving
-- 	around |pi_paren.txt|.
-- 	Note: Use of the short form is rated PG.
vim.o.showmatch = "false"
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	If in Insert, Replace or Visual mode put a message on the last line.
-- 	The |hl-ModeMsg| highlight group determines the highlighting.
vim.o.showmode = "true"
-- number	(default 1)
-- 			global
-- 	The value of this option specifies when the line with tab page labels
-- 	will be displayed:
-- 		0: never
-- 		1: only if there are at least two tab pages
-- 		2: always
-- 	This is both for the GUI and non-GUI implementation of the tab pages
-- 	line.
-- 	See |tab-page| for more information about tab pages.
vim.o.showtabline = "1"
-- number	(default 1)
-- 			global
-- 	The minimal number of columns to scroll horizontally.  Used only when
-- 	the 'wrap' option is off and the cursor is moved off of the screen.
-- 	When it is zero the cursor will be put in the middle of the screen.
-- 	When using a slow terminal set it to a large number or 0.  Not used
-- 	for "zh" and "zl" commands.
vim.o.sidescroll = "1"
-- number (default 0)
-- 			global or local to window |global-local|
-- 	The minimal number of screen columns to keep to the left and to the
-- 	right of the cursor if 'nowrap' is set.  Setting this option to a
-- 	value greater than 0 while having |'sidescroll'| also at a non-zero
-- 	value makes some context visible in the line you are scrolling in
-- 	horizontally (except at beginning of the line).  Setting this option
-- 	to a large value (like 999) has the effect of keeping the cursor
-- 	horizontally centered in the window, as long as one does not come too
-- 	close to the beginning of the line.
-- 	After using the local value, go back the global value with one of
-- 	these two: >
-- 		setlocal sidescrolloff<
-- 		setlocal sidescrolloff=-1
-- <
-- 	Example: Try this together with 'sidescroll' and 'listchars' as
-- 		 in the following example to never allow the cursor to move
-- 		 onto the "extends" character: >
vim.o.sidescrolloff = "0"
-- boolean	(default off)
-- 			global
-- 	When on, splitting a window will put the new window below the current
-- 	one. |:split|
vim.o.splitbelow = "false"
-- boolean	(default off)
-- 			global
-- 	When on, splitting a window will put the new window right of the
-- 	current one. |:vsplit|
vim.o.splitright = "false"
-- boolean	(default off)
-- 			global
-- 	Override the 'ignorecase' option if the search pattern contains upper
-- 	case characters.  Only used when the search pattern is typed and
-- 	'ignorecase' option is on.  Used for the commands "/", "?", "n", "N",
-- 	":g" and ":s".  Not used for "*", "#", "gd", tag search, etc.  After
-- 	"*" and "#" you can make 'smartcase' used by doing a "/" command,
-- 	recalling the search pattern from history and hitting <Enter>.
vim.o.smartcase = "false"
-- boolean	(default off)
-- 			global
-- 	When "on" the commands listed below move the cursor to the first
-- 	non-blank of the line.  When off the cursor is kept in the same column
-- 	(if possible).  This applies to the commands: CTRL-D, CTRL-U, CTRL-B,
-- 	CTRL-F, "G", "H", "M", "L", gg, and to the commands "d", "<<" and ">>"
-- 	with a linewise operator, with "%" with a count and to buffer changing
-- 	commands (CTRL-^, :bnext, :bNext, etc.).  Also for an Ex command that
-- 	only has a line number, e.g., ":25" or ":+".
-- 	In case of buffer changing commands the cursor is placed at the column
-- 	where it was the last time the buffer was edited.
vim.o.startofline = "false"
-- string	(default empty)
-- 			global or local to window |global-local|
-- 	When nonempty, this option determines the content of the status line.
-- 	Also see |status-line|.
vim.o.statusline = ""
-- boolean	(default on)
-- 			global
-- 	When on, a <Tab> in front of a line inserts blanks according to
-- 	'shiftwidth'.  'tabstop' or 'softtabstop' is used in other places.  A
-- 	<BS> will delete a 'shiftwidth' worth of space at the start of the
-- 	line.
-- 	When off, a <Tab> always inserts blanks according to 'tabstop' or
-- 	'softtabstop'.  'shiftwidth' is only used for shifting text left or
-- 	right |shift-left-right|.
-- 	What gets inserted (a <Tab> or spaces) depends on the 'expandtab'
-- 	option.  Also see |ins-expandtab|.  When 'expandtab' is not set, the
-- 	number of spaces is minimized by using <Tab>s.
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
vim.o.smarttab = "true"
-- string	(default ".bak,~,.o,.h,.info,.swp,.obj")
-- 			global
-- 	Files with these suffixes get a lower priority when multiple files
-- 	match a wildcard.  See |suffixes|.  Commas can be used to separate the
-- 	suffixes.  Spaces after the comma are ignored.  A dot is also seen as
-- 	the start of a suffix.  To avoid a dot or comma being recognized as a
-- 	separator, precede it with a backslash (see |option-backslash| about
-- 	including spaces and backslashes).
-- 	See 'wildignore' for completely ignoring files.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	suffixes from the list.  This avoids problems when a future version
-- 	uses another default.
vim.o.suffixes = ".bak,~,.o,.h,.info,.swp,.obj"
-- string	(default "")
-- 			global
-- 	This option controls the behavior when switching between buffers.
-- 	Possible values (comma separated list):
-- 	   useopen	If included, jump to the first open window that
-- 			contains the specified buffer (if there is one).
-- 			Otherwise: Do not examine other windows.
-- 			This setting is checked with |quickfix| commands, when
-- 			jumping to errors (":cc", ":cn", "cp", etc.).  It is
-- 			also used in all buffer related split commands, for
-- 			example ":sbuffer", ":sbnext", or ":sbrewind".
-- 	   usetab	Like "useopen", but also consider windows in other tab
-- 			pages.
-- 	   split	If included, split the current window before loading
-- 			a buffer for a |quickfix| command that display errors.
-- 			Otherwise: do not split, use current window (when used
-- 			in the quickfix window: the previously used window or
-- 			split if there is no other window).
-- 	   vsplit	Just like "split" but split vertically.
-- 	   newtab	Like "split", but open a new tab page.  Overrules
-- 			"split" when both are present.
-- 	   uselast	If included, jump to the previously used window when
-- 			jumping to errors with |quickfix| commands.
vim.o.switchbuf = "uselast"
-- string	(default "best")
-- 			global
-- 	Methods used for spelling suggestions.  Both for the |z=| command and
-- 	the |spellsuggest()| function.  This is a comma-separated list of
-- 	items:
vim.o.spellsuggest = "best"
-- string	(default empty)
-- 			global
-- 	When nonempty, this option determines the content of the tab pages
-- 	line at the top of the Vim window.  When empty Vim will use a default
-- 	tab pages line.  See |setting-tabline| for more info.
vim.o.tabline = ""
-- number	(default 50)
-- 			global
-- 	Maximum number of tab pages to be opened by the |-p| command line
-- 	argument or the ":tab all" command. |tabpage|
vim.o.tabpagemax = "50"
-- boolean	(default on)
-- 			global
-- 	When searching for a tag (e.g., for the |:ta| command), Vim can either
-- 	use a binary search or a linear search in a tags file.  Binary
-- 	searching makes searching for a tag a LOT faster, but a linear search
-- 	will find more tags if the tags file wasn't properly sorted.
-- 	Vim normally assumes that your tags files are sorted, or indicate that
-- 	they are not sorted.  Only when this is not the case does the
-- 	'tagbsearch' option need to be switched off.
vim.o.tagbsearch = "true"
-- string	(default "followic")
-- 			global or local to buffer |global-local|
-- 	This option specifies how case is handled when searching the tags
-- 	file:
-- 	   followic	Follow the 'ignorecase' option
-- 	   followscs    Follow the 'smartcase' and 'ignorecase' options
-- 	   ignore	Ignore case
-- 	   match	Match case
-- 	   smart	Ignore case unless an upper case letter is used
vim.o.tagcase = "followic"
-- number	(default 0)
-- 			global
-- 	If non-zero, tags are significant up to this number of characters.
vim.o.taglength = "0"
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	If on and using a tags file in another directory, file names in that
-- 	tags file are relative to the directory where the tags file is.
vim.o.tagrelative = "true"
-- string	(default "./tags;,tags")
-- 			global or local to buffer |global-local|
-- 	Filenames for the tag command, separated by spaces or commas.  To
-- 	include a space or comma in a file name, precede it with a backslash
-- 	(see |option-backslash| about including spaces and backslashes).
-- 	When a file name starts with "./", the '.' is replaced with the path
-- 	of the current file.  But only when the 'd' flag is not included in
-- 	'cpoptions'.  Environment variables are expanded |:set_env|.  Also see
-- 	|tags-option|.
-- 	"*", "**" and other wildcards can be used to search for tags files in
-- 	a directory tree.  See |file-searching|.  E.g., "/lib/**/tags" will
-- 	find all files named "tags" below "/lib".  The filename itself cannot
-- 	contain wildcards, it is used as-is.  E.g., "/lib/**/tags?" will find
-- 	files called "tags?".
-- 	The |tagfiles()| function can be used to get a list of the file names
-- 	actually used.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	file names from the list.  This avoids problems when a future version
-- 	uses another default.
vim.o.tags = "./tags;,tags"
-- boolean	(default on)
-- 			global
-- 	When on, the |tagstack| is used normally.  When off, a ":tag" or
-- 	":tselect" command with an argument will not push the tag onto the
-- 	tagstack.  A following ":tag" without an argument, a ":pop" command or
-- 	any other command that uses the tagstack will use the unmodified
-- 	tagstack, but does change the pointer to the active entry.
-- 	Resetting this option is useful when using a ":tag" command in a
-- 	mapping which should not change the tagstack.
vim.o.tagstack = "true"
-- boolean (default off)
-- 			global
-- 	The terminal is in charge of Bi-directionality of text (as specified
-- 	by Unicode).  The terminal is also expected to do the required shaping
-- 	that some languages (such as Arabic) require.
-- 	Setting this option implies that 'rightleft' will not be set when
-- 	'arabic' is set and the value of 'arabicshape' will be ignored.
-- 	Note that setting 'termbidi' has the immediate effect that
-- 	'arabicshape' is ignored, but 'rightleft' isn't changed automatically.
-- 	For further details see |arabic.txt|.
vim.o.termbidi = "false"
-- string	(default ""; with GTK+ GUI: "utf-8"; with
-- 						    Macintosh GUI: "macroman")
-- 			global
-- 	Encoding used for the terminal.  This specifies what character
-- 	encoding the keyboard produces and the display will understand.  For
-- 	the GUI it only applies to the keyboard ('encoding' is used for the
-- 	display).  Except for the Mac when 'macatsui' is off, then
-- 	'termencoding' should be "macroman".
-- 								*E617*
-- 	Note: This does not apply to the GTK+ GUI.  After the GUI has been
-- 	successfully initialized, 'termencoding' is forcibly set to "utf-8".
-- 	Any attempts to set a different value will be rejected, and an error
-- 	message is shown.
-- 	For the Win32 GUI and console versions 'termencoding' is not used,
-- 	because the Win32 system always passes Unicode characters.
-- 	When empty, the same encoding is used as for the 'encoding' option.
-- 	This is the normal value.
-- 	Not all combinations for 'termencoding' and 'encoding' are valid.  See
-- 	|encoding-table|.
-- 	The value for this option must be supported by internal conversions or
-- 	iconv().  When this is not possible no conversion will be done and you
-- 	will probably experience problems with non-ASCII characters.
-- 	Example: You are working with the locale set to euc-jp (Japanese) and
-- 	want to edit a UTF-8 file: >
-- 		:let &termencoding = &encoding
-- 		:set encoding=utf-8
-- <	You need to do this when your system has no locale support for UTF-8.
vim.o.termencoding = ""
-- boolean (default off)
-- 			global
-- 	Enables 24-bit RGB color in the |TUI|.  Uses "gui" |:highlight|
-- 	attributes instead of "cterm" attributes. |highlight-guifg|
-- 	Requires an ISO-8613-3 compatible terminal.
vim.o.termguicolors = "false"
vim.o.termpastefilter = "BS,HT,ESC,DEL"
-- boolean	(default off)
-- 			global
-- 	When set: Add 's' flag to 'shortmess' option (this makes the message
-- 	for a search that hits the start or end of the file not being
-- 	displayed).  When reset: Remove 's' flag from 'shortmess' option.
vim.o.terse = "false"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	List of file names, separated by commas, that are used to lookup words
-- 	for thesaurus completion commands |i_CTRL-X_CTRL-T|.
vim.o.thesaurus = ""
vim.o.thesaurusfunc = ""
-- boolean	(default off)
-- 			global
-- 	When on: The tilde command "~" behaves like an operator.
vim.o.tildeop = "false"
-- boolean (default on)
-- 			global
-- 	This option and 'timeoutlen' determine the behavior when part of a
-- 	mapped key sequence has been received. For example, if <c-f> is
-- 	pressed and 'timeout' is set, Nvim will wait 'timeoutlen' milliseconds
-- 	for any key that can follow <c-f> in a mapping.
vim.o.timeout = "true"
-- number	(default 1000)
-- 			global
-- 	Time in milliseconds to wait for a mapped sequence to complete.
vim.o.timeoutlen = "1000"
-- boolean	(default on, off when a |vimrc| or |gvimrc|
-- 					file is found, reset in |defaults.vim|)
-- 			global
-- 	This option has the effect of making Vim either more Vi-compatible, or
-- 	make Vim behave in a more useful way.
vim.o.compatible = "false"
-- number	(default 85)
-- 			global
-- 	Gives the percentage of 'columns' to use for the length of the window
-- 	title.  When the title is longer, only the end of the path name is
-- 	shown.  A '<' character before the path name is used to indicate this.
-- 	Using a percentage makes this adapt to the width of the window.  But
-- 	it won't work perfectly, because the actual number of characters
-- 	available also depends on the font used and other things in the title
-- 	bar.  When 'titlelen' is zero the full path is used.  Otherwise,
-- 	values from 1 to 30000 percent can be used.
-- 	'titlelen' is also used for the 'titlestring' option.
vim.o.titlelen = "85"
-- string	(default "")
-- 			global
-- 	If not empty, this option will be used to set the window title when
-- 	exiting.  Only if 'title' is enabled.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
-- 						*'titlestring'*
vim.o.titleold = ""
-- string	(default "")
-- 			global
-- 	When this option is not empty, it will be used for the title of the
-- 	window.  This happens only when the 'title' option is on.
vim.o.titlestring = ""
-- boolean (default on)
-- 			global
-- 	This option and 'ttimeoutlen' determine the behavior when part of a
-- 	key code sequence has been received by the |TUI|.
vim.o.ttimeout = "true"
-- number	(default 50)
-- 			global
-- 	Time in milliseconds to wait for a key code sequence to complete. Also
-- 	used for CTRL-\ CTRL-N and CTRL-\ CTRL-G when part of a command has
-- 	been typed.
vim.o.ttimeoutlen = "50"
-- Removed. |vim-differences|
vim.o.ttyfast = "true"
-- string	(default "$XDG_DATA_HOME/nvim/undo")
-- 			global
-- 	List of directory names for undo files, separated with commas.
-- 	See |'backupdir'| for details of the format.
-- 	"." means using the directory of the file.  The undo file name for
-- 	"file.txt" is ".file.txt.un~".
-- 	For other directories the file name is the full path of the edited
-- 	file, with path separators replaced with "%".
-- 	When writing: The first directory that exists is used.  "." always
-- 	works, no directories after "." will be used for writing.  If none of
-- 	the directories exist Neovim will attempt to create last directory in
-- 	the list.
-- 	When reading all entries are tried to find an undo file.  The first
-- 	undo file that exists is used.  When it cannot be read an error is
-- 	given, no further entry is used.
-- 	See |undo-persistence|.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.undodir = "/home/sindrets/.local/share/nvim/undo//"
-- string	(default: "menu,preview")
-- 			global
-- 	A comma separated list of options for Insert mode completion
-- 	|ins-completion|.  The supported values are:
vim.o.completeopt = "menu,preview"
-- string	(default: "")
-- 			local to buffer
-- 			{only for MS-Windows}
-- 	When this option is set it overrules 'shellslash' for completion:
-- 	- When this option is set to "slash", a forward slash is used for path
-- 	  completion in insert mode. This is useful when editing HTML tag, or
-- 	  Makefile with 'noshellslash' on Windows.
-- 	- When this option is set to "backslash", backslash is used. This is
-- 	  useful when editing a batch file with 'shellslash' set on Windows.
-- 	- When this option is empty, same character is used as for
-- 	  'shellslash'.
-- 	For Insert mode completion the buffer-local value is used.  For
-- 	command line completion the global value is used.
vim.o.completeslash = ""
-- boolean (default off)
-- 			global
-- 	When 'confirm' is on, certain operations that would normally
-- 	fail because of unsaved changes to a buffer, e.g. ":q" and ":e",
-- 	instead raise a dialog asking if you wish to save the current
-- 	file(s).  You can still use a ! to unconditionally |abandon| a buffer.
-- 	If 'confirm' is off you can still activate confirmation for one
-- 	command only (this is most useful in mappings) with the |:confirm|
-- 	command.
-- 	Also see the |confirm()| function and the 'v' flag in 'guioptions'.
vim.o.confirm = "false"
-- number	(default: 200)
-- 			global
-- 	After typing this many characters the swap file will be written to
-- 	disk.  When zero, no swap file will be created at all (see chapter on
-- 	recovery |crash-recovery|).  'updatecount' is set to zero by starting
-- 	Vim with the "-n" option, see |startup|.  When editing in readonly
-- 	mode this option will be initialized to 10000.
-- 	The swapfile can be disabled per buffer with |'swapfile'|.
-- 	When 'updatecount' is set from zero to non-zero, swap files are
-- 	created for all buffers that have 'swapfile' set.  When 'updatecount'
-- 	is set to zero, existing swap files are not deleted.
-- 	This option has no meaning in buffers where |'buftype'| is "nofile"
-- 	or "nowrite".
vim.o.updatecount = "200"
-- string	(Vim default: "aABceFs_",
-- 				 Vi default: all flags)
-- 			global
-- 	A sequence of single character flags.  When a character is present
-- 	this indicates Vi-compatible behavior.  This is used for things where
-- 	not being Vi-compatible is mostly or sometimes preferred.
-- 	'cpoptions' stands for "compatible-options".
-- 	Commas can be added for readability.
-- 	To avoid problems with flags that are added in the future, use the
-- 	"+=" and "-=" feature of ":set" |add-option-flags|.
vim.o.cpoptions = "aABceFs_"
-- number	(default 0)
-- 			global
-- 	Determines how many components of the path to show in a list of tags.
-- 	See |cscopepathcomp|.
vim.o.cscopepathcomp = "0"
-- string	(default "cscope")
-- 			global
-- 	Specifies the command to execute cscope.  See |cscopeprg|.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.cscopeprg = "cscope"
-- number	(default 0)
-- 			global
-- 	When bigger than zero, Vim will give messages about what it is doing.
-- 	Currently, these messages are given:
-- 	>= 1	When the shada file is read or written.
-- 	>= 2	When a file is ":source"'ed.
-- 	>= 3	UI info, terminal capabilities
-- 	>= 5	Every searched tags file and include file.
-- 	>= 8	Files for which a group of autocommands is executed.
-- 	>= 9	Every executed autocommand.
-- 	>= 12	Every executed function.
-- 	>= 13	When an exception is thrown, caught, finished, or discarded.
-- 	>= 14	Anything pending in a ":finally" clause.
-- 	>= 15	Every executed Ex command (truncated at 200 characters).
vim.o.verbose = "0"
-- string	(default "")
-- 			global
-- 	Specifies whether to use quickfix window to show cscope results.
-- 	See |cscopequickfix|.
vim.o.cscopequickfix = ""
-- boolean (default off)
-- 			global
-- 	In the absence of a prefix (-P) for cscope. setting this option enables
-- 	to use the basename of cscope.out path as the prefix.
-- 	See |cscoperelative|.
vim.o.cscoperelative = "false"
-- boolean (default off)
-- 			global
-- 	Use cscope for tag commands.  See |cscope-options|.
vim.o.cscopetag = "false"
-- number	(default 0)
-- 			global
-- 	Determines the order in which ":cstag" performs a search.  See
-- 	|cscopetagorder|.
vim.o.cscopetagorder = "0"
-- boolean (default off)
-- 			global
-- 			{not available when compiled without the |+cscope|
-- 			feature}
-- 	Give messages when adding a cscope database.  See |cscopeverbose|.
-- 	NOTE: This option is reset when 'compatible' is set.
vim.o.cscopeverbose = "true"
-- string	(default on Unix: ".,/usr/include,,"
-- 				   other systems: ".,,")
-- 			global or local to buffer |global-local|
-- 	This is a list of directories which will be searched when using the
-- 	|gf|, [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| and other commands,
-- 	provided that the file being searched for has a relative path (not
-- 	starting with "/", "./" or "../").  The directories in the 'path'
-- 	option may be relative or absolute.
-- 	- Use commas to separate directory names: >
-- 		:set path=.,/usr/local/include,/usr/include
-- <	- Spaces can also be used to separate directory names (for backwards
-- 	  compatibility with version 3.0).  To have a space in a directory
-- 	  name, precede it with an extra backslash, and escape the space: >
-- 		:set path=.,/dir/with\\\ space
-- <	- To include a comma in a directory name precede it with an extra
-- 	  backslash: >
-- 		:set path=.,/dir/with\\,comma
-- <	- To search relative to the directory of the current file, use: >
-- 		:set path=.
-- <	- To search in the current directory use an empty string between two
-- 	  commas: >
-- 		:set path=,,
-- <	- A directory name may end in a ':' or '/'.
-- 	- Environment variables are expanded |:set_env|.
-- 	- When using |netrw.vim| URLs can be used.  For example, adding
-- 	  "http://www.vim.org" will make ":find index.html" work.
-- 	- Search upwards and downwards in a directory tree using "*", "**" and
-- 	  ";".  See |file-searching| for info and syntax.
-- 	- Careful with '\' characters, type two to get one in the option: >
-- 		:set path=.,c:\\include
-- <	  Or just use '/' instead: >
-- 		:set path=.,c:/include
-- <	Don't forget "." or files won't even be found in the same directory as
-- 	the file!
-- 	The maximum length is limited.  How much depends on the system, mostly
-- 	it is something like 256 or 1024 characters.
-- 	You can check if all the include files are found, using the value of
-- 	'path', see |:checkpath|.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	directories from the list.  This avoids problems when a future version
-- 	uses another default.  To remove the current directory use: >
-- 		:set path-=
-- <	To add the current directory use: >
-- 		:set path+=
-- <	To use an environment variable, you probably need to replace the
-- 	separator.  Here is an example to append $INCL, in which directory
-- 	names are separated with a semi-colon: >
-- 		:let &path = &path . "," . substitute($INCL, ';', ',', 'g')
-- <	Replace the ';' with a ':' or whatever separator is used.  Note that
-- 	this doesn't work when $INCL contains a comma or white space.
vim.o.path = ".,/usr/include,,"
