--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- number	(default: 10000)
-- 			local to buffer
-- 	Maximum number of lines kept beyond the visible screen. Lines at the
-- 	top are deleted if new lines exceed this limit.
-- 	Minimum is 1, maximum is 100000.
-- 	Only in |terminal| buffers.
vim.bo.scrollback = "-1"
-- string	(default "0{,0},0),0],:,0#,!^F,o,O,e")
-- 			local to buffer
-- 	A list of keys that, when typed in Insert mode, cause reindenting of
-- 	the current line.  Only happens if 'indentexpr' isn't empty.
-- 	The format is identical to 'cinkeys', see |indentkeys-format|.
-- 	See |C-indenting| and |indent-expression|.
vim.bo.indentkeys = "0{,0},0),0],:,0#,!^F,o,O,e"
-- boolean	(default off)
-- 			local to buffer
-- 	Enables automatic C program indenting.  See 'cinkeys' to set the keys
-- 	that trigger reindenting in insert mode and 'cinoptions' to set your
-- 	preferred indent style.
-- 	If 'indentexpr' is not empty, it overrules 'cindent'.
-- 	If 'lisp' is not on and both 'indentexpr' and 'equalprg' are empty,
-- 	the "=" operator indents using this algorithm rather than calling an
-- 	external program.
-- 	See |C-indenting|.
-- 	When you don't like the way 'cindent' works, try the 'smartindent'
-- 	option or 'indentexpr'.
-- 	This option is not used when 'paste' is set.
vim.bo.cindent = "false"
-- string	(default "0{,0},0),0],:,0#,!^F,o,O,e")
-- 			local to buffer
-- 	A list of keys that, when typed in Insert mode, cause reindenting of
-- 	the current line.  Only used if 'cindent' is on and 'indentexpr' is
-- 	empty.
-- 	For the format of this option see |cinkeys-format|.
-- 	See |C-indenting|.
vim.bo.cinkeys = "0{,0},0),0],:,0#,!^F,o,O,e"
-- string	(default "")
-- 			local to buffer
-- 	The 'cinoptions' affect the way 'cindent' reindents lines in a C
-- 	program.  See |cinoptions-values| for the values of this option, and
-- 	|C-indenting| for info on C indenting in general.
vim.bo.cinoptions = ""
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	List of file names, separated by commas, that are used to lookup words
-- 	for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should
-- 	contain a list of words.  This can be one word per line, or several
-- 	words per line, separated by non-keyword characters (white space is
-- 	preferred).  Maximum line length is 510 bytes.
vim.bo.dictionary = ""
-- string	(default "if,else,while,do,for,switch")
-- 			local to buffer
-- 	These keywords start an extra indent in the next line when
-- 	'smartindent' or 'cindent' is set.  For 'cindent' this is only done at
-- 	an appropriate place (inside {}).
-- 	Note that 'ignorecase' isn't used for 'cinwords'.  If case doesn't
-- 	matter, include the keyword both the uppercase and lowercase:
-- 	"if,If,IF".
vim.bo.cinwords = "if,else,while,do,for,switch"
-- string (default: @,48-57,_,192-255
-- 				Vi default: @,48-57,_)
-- 			local to buffer
-- 	Keywords are used in searching and recognizing with many commands:
-- 	"w", "*", "[i", etc.  It is also used for "\k" in a |pattern|.  See
-- 	'isfname' for a description of the format of this option.  For '@'
-- 	characters above 255 check the "word" character class.
-- 	For C programs you could use "a-z,A-Z,48-57,_,.,-,>".
-- 	For a help file it is set to all non-blank printable characters except
-- 	'*', '"' and '|' (so that CTRL-] on a command finds the help for that
-- 	command).
-- 	When the 'lisp' option is on the '-' character is always included.
-- 	This option also influences syntax highlighting, unless the syntax
-- 	uses |:syn-iskeyword|.
vim.bo.iskeyword = "@,48-57,_,192-255"
-- boolean	(Vim default: on (off for root),
-- 				 Vi default: off)
-- 			local to buffer
-- 	If 'modeline' is on 'modelines' gives the number of lines that is
-- 	checked for set commands.  If 'modeline' is off or 'modelines' is zero
-- 	no lines are checked.  See |modeline|.
vim.bo.modeline = "true"
-- number	(default 8)
-- 			local to buffer
-- 	Number of spaces to use for each step of (auto)indent.  Used for
-- 	|'cindent'|, |>>|, |<<|, etc.
-- 	When zero the 'ts' value will be used.  Use the |shiftwidth()|
-- 	function to get the effective shiftwidth value.
vim.bo.shiftwidth = "8"
-- boolean	(default on)
-- 			local to buffer
-- 	When off the buffer contents cannot be changed.  The 'fileformat' and
-- 	'fileencoding' options also can't be changed.
-- 	Can be reset on startup with the |-M| command line argument.
vim.bo.modifiable = "true"
-- string	(default "^\s*#\s*define")
-- 			global or local to buffer |global-local|
-- 	Pattern to be used to find a macro definition.  It is a search
-- 	pattern, just like for the "/" command.  This option is used for the
-- 	commands like "[i" and "[d" |include-search|.  The 'isident' option is
-- 	used to recognize the defined name after the match:
-- 		{match with 'define'}{non-ID chars}{defined name}{non-ID char}
-- 	See |option-backslash| about inserting backslashes to include a space
-- 	or backslash.
-- 	The default value is for C programs.  For C++ this value would be
-- 	useful, to include const type declarations: >
-- 		^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
-- <	You can also use "\ze" just before the name and continue the pattern
-- 	to check what is following.  E.g. for Javascript, if a function is
-- 	defined with "func_name = function(args)": >
-- 		^\s*\ze\i\+\s*=\s*function(
-- <	If the function is defined with "func_name : function() {...": >
-- 	        ^\s*\ze\i\+\s*[:]\s*(*function\s*(
-- <	When using the ":set" command, you need to double the backslashes!
-- 	To avoid that use `:let` with a single quote string: >
-- 		let &l:define = '^\s*\ze\k\+\s*=\s*function('
-- <
vim.bo.define = "^\\s*#\\s*define"
-- boolean	(default off)
-- 			local to buffer
-- 	When on, the buffer is considered to be modified.  This option is set
-- 	when:
-- 	1. A change was made to the text since it was last written.  Using the
-- 	   |undo| command to go back to the original text will reset the
-- 	   option.  But undoing changes that were made before writing the
-- 	   buffer will set the option again, since the text is different from
-- 	   when it was written.
-- 	2. 'fileformat' or 'fileencoding' is different from its original
-- 	   value.  The original value is set when the buffer is read or
-- 	   written.  A ":set nomodified" command also resets the original
-- 	   values to the current values and the 'modified' option will be
-- 	   reset.
-- 	   Similarly for 'eol' and 'bomb'.
-- 	This option is not set when a change is made to the buffer as the
-- 	result of a BufNewFile, BufRead/BufReadPost, BufWritePost,
-- 	FileAppendPost or VimLeave autocommand event.  See |gzip-example| for
-- 	an explanation.
-- 	When 'buftype' is "nowrite" or "nofile" this option may be set, but
-- 	will be ignored.
-- 	Note that the text may actually be the same, e.g. 'modified' is set
-- 	when using "rA" on an "A".
vim.bo.modified = "false"
-- boolean	(default on)
-- 			local to buffer
-- 	When writing a file and this option is on, <EOL> at the end of file
-- 	will be restored if missing. Turn this option off if you want to
-- 	preserve the situation from the original file.
-- 	When the 'binary' option is set the value of this option doesn't
-- 	matter.
-- 	See the 'endofline' option.
vim.bo.fixendofline = "true"
-- boolean	(default on)
-- 			global or local to buffer |global-local|
-- 	When a file has been detected to have been changed outside of Vim and
-- 	it has not been changed inside of Vim, automatically read it again.
-- 	When the file has been deleted this is not done, so you have the text
-- 	from before it was deleted.  When it appears again then it is read.
-- 	|timestamp|
-- 	If this option has a local value, use this command to switch back to
-- 	using the global value: >
-- 		:set autoread<
-- <
-- 				 *'autowrite'* *'aw'* *'noautowrite'* *'noaw'*
vim.bo.autoread = "true"
-- string	(default ":Man", Windows: ":help")
-- 			global or local to buffer |global-local|
-- 	Program to use for the |K| command.  Environment variables are
-- 	expanded |:set_env|.  ":help" may be used to access the Vim internal
-- 	help.  (Note that previously setting the global option to the empty
-- 	value did this, which is now deprecated.)
-- 	When the first character is ":", the command is invoked as a Vim
-- 	command prefixed with [count].
-- 	When "man" or "man -s" is used, Vim will automatically translate
-- 	a [count] for the "K" command to a section number.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	Example: >
-- 		:set keywordprg=man\ -s
-- 		:set keywordprg=:Man
-- <	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.keywordprg = ":Man"
-- string	(default
-- 				"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-")
-- 			local to buffer
-- 	A comma separated list of strings that can start a comment line.  See
-- 	|format-comments|.  See |option-backslash| about using backslashes to
-- 	insert a space.
vim.bo.comments = "s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-"
-- string	(default "")
-- 			local to buffer
-- 	Name of a keyboard mapping.  See |mbyte-keymap|.
-- 	Setting this option to a valid keymap name has the side effect of
-- 	setting 'iminsert' to one, so that the keymap becomes effective.
-- 	'imsearch' is also set to one, unless it was -1
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.bo.keymap = ""
-- boolean	(default off)
-- 			local to buffer
-- 	When on, Vim automatically saves undo history to an undo file when
-- 	writing a buffer to a file, and restores undo history from the same
-- 	file on buffer read.
-- 	The directory where the undo file is stored is specified by 'undodir'.
-- 	For more information about this feature see |undo-persistence|.
-- 	The undo file is not read when 'undoreload' causes the buffer from
-- 	before a reload to be saved for undo.
-- 	When 'undofile' is turned off the undo file is NOT deleted.
vim.bo.undofile = "false"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	Encoding used for reading the output of external commands.  When empty,
-- 	encoding is not converted.
-- 	This is used for `:make`, `:lmake`, `:grep`, `:lgrep`, `:grepadd`,
-- 	`:lgrepadd`, `:cfile`, `:cgetfile`, `:caddfile`, `:lfile`, `:lgetfile`,
-- 	and `:laddfile`.
vim.bo.makeencoding = ""
-- number (default: 0)
-- 			local to buffer
-- 	|channel| connected to the buffer, or 0 if no channel is connected.
-- 	In a |:terminal| buffer this is the terminal channel.
-- 	Read-only.
vim.bo.channel = "0"
-- string	(default: empty)
-- 			local to buffer
-- 	This option specifies a function to be used to perform tag searches.
-- 	The function gets the tag pattern and should return a List of matching
-- 	tags.  See |tag-function| for an explanation of how to write the
-- 	function and an example.
vim.bo.tagfunc = ""
-- string	(default on Unix: ".,/usr/include,,"
-- 				   other systems: ".,,")
-- 			global or local to buffer |global-local|
-- 	This is a list of directories which will be searched when using the
-- 	|gf|, [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| and other commands,
-- 	provided that the file being searched for has a relative path (not
-- 	starting with "/", "./" or "../").  The directories in the 'path'
-- 	option may be relative or absolute.
-- 	- Use commas to separate directory names: >
-- 		:set path=.,/usr/local/include,/usr/include
-- <	- Spaces can also be used to separate directory names (for backwards
-- 	  compatibility with version 3.0).  To have a space in a directory
-- 	  name, precede it with an extra backslash, and escape the space: >
-- 		:set path=.,/dir/with\\\ space
-- <	- To include a comma in a directory name precede it with an extra
-- 	  backslash: >
-- 		:set path=.,/dir/with\\,comma
-- <	- To search relative to the directory of the current file, use: >
-- 		:set path=.
-- <	- To search in the current directory use an empty string between two
-- 	  commas: >
-- 		:set path=,,
-- <	- A directory name may end in a ':' or '/'.
-- 	- Environment variables are expanded |:set_env|.
-- 	- When using |netrw.vim| URLs can be used.  For example, adding
-- 	  "http://www.vim.org" will make ":find index.html" work.
-- 	- Search upwards and downwards in a directory tree using "*", "**" and
-- 	  ";".  See |file-searching| for info and syntax.
-- 	- Careful with '\' characters, type two to get one in the option: >
-- 		:set path=.,c:\\include
-- <	  Or just use '/' instead: >
-- 		:set path=.,c:/include
-- <	Don't forget "." or files won't even be found in the same directory as
-- 	the file!
-- 	The maximum length is limited.  How much depends on the system, mostly
-- 	it is something like 256 or 1024 characters.
-- 	You can check if all the include files are found, using the value of
-- 	'path', see |:checkpath|.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	directories from the list.  This avoids problems when a future version
-- 	uses another default.  To remove the current directory use: >
-- 		:set path-=
-- <	To add the current directory use: >
-- 		:set path+=
-- <	To use an environment variable, you probably need to replace the
-- 	separator.  Here is an example to append $INCL, in which directory
-- 	names are separated with a semi-colon: >
-- 		:let &path = &path . "," . substitute($INCL, ';', ',', 'g')
-- <	Replace the ';' with a ':' or whatever separator is used.  Note that
-- 	this doesn't work when $INCL contains a comma or white space.
vim.bo.path = ".,/usr/include,,"
-- string	(default "(:),{:},[:]")
-- 			local to buffer
-- 	Characters that form pairs.  The |%| command jumps from one to the
-- 	other.
-- 	Only character pairs are allowed that are different, thus you cannot
-- 	jump between two double quotes.
-- 	The characters must be separated by a colon.
-- 	The pairs must be separated by a comma.  Example for including '<' and
-- 	'>' (HTML): >
-- 		:set mps+=<:>
vim.bo.matchpairs = "(:),{:},[:]"
-- boolean (default on)
-- 			local to buffer
-- 	Use a swapfile for the buffer.  This option can be reset when a
-- 	swapfile is not wanted for a specific buffer.  For example, with
-- 	confidential information that even root must not be able to access.
-- 	Careful: All text will be in memory:
-- 		- Don't use this for big files.
-- 		- Recovery will be impossible!
-- 	A swapfile will only be present when |'updatecount'| is non-zero and
-- 	'swapfile' is set.
-- 	When 'swapfile' is reset, the swap file for the current buffer is
-- 	immediately deleted.  When 'swapfile' is set, and 'updatecount' is
-- 	non-zero, a swap file is immediately created.
-- 	Also see |swap-file|.
-- 	If you want to open a new buffer without creating a swap file for it,
-- 	use the |:noswapfile| modifier.
-- 	See 'directory' for where the swap file is created.
vim.bo.swapfile = "true"
vim.bo.cinscopedecls = "public,protected,private"
-- string	(default "")
-- 			local to buffer
-- 	Comma separated list of suffixes, which are used when searching for a
-- 	file for the "gf", "[I", etc. commands.  Example: >
-- 		:set suffixesadd=.java
-- <
-- 				*'swapfile'* *'swf'* *'noswapfile'* *'noswf'*
vim.bo.suffixesadd = ""
-- string	(default "bin,hex")
-- 			local to buffer
-- 	This defines what bases Vim will consider for numbers when using the
-- 	CTRL-A and CTRL-X commands for adding to and subtracting from a number
-- 	respectively; see |CTRL-A| for more info on these commands.
-- 	alpha	If included, single alphabetical characters will be
-- 		incremented or decremented.  This is useful for a list with a
-- 		letter index a), b), etc.		*octal-nrformats*
-- 	octal	If included, numbers that start with a zero will be considered
-- 		to be octal.  Example: Using CTRL-A on "007" results in "010".
-- 	hex	If included, numbers starting with "0x" or "0X" will be
-- 		considered to be hexadecimal.  Example: Using CTRL-X on
-- 		"0x100" results in "0x0ff".
-- 	bin	If included, numbers starting with "0b" or "0B" will be
-- 		considered to be binary.  Example: Using CTRL-X on
-- 		"0b1000" subtracts one, resulting in "0b0111".
-- 	Numbers which simply begin with a digit in the range 1-9 are always
-- 	considered decimal.  This also happens for numbers that are not
-- 	recognized as octal or hex.
vim.bo.nrformats = "bin,hex"
-- boolean	(default off)
-- 			local to buffer
-- 	When doing keyword completion in insert mode |ins-completion|, and
-- 	'ignorecase' is also on, the case of the match is adjusted depending
-- 	on the typed text.  If the typed text contains a lowercase letter
-- 	where the match has an upper case letter, the completed part is made
-- 	lowercase.  If the typed text has no lowercase letters and the match
-- 	has a lowercase letter where the typed text has an uppercase letter,
-- 	and there is a letter before it, the completed part is made uppercase.
-- 	With 'noinfercase' the match is used as-is.
vim.bo.infercase = "false"
-- boolean	(default on)
-- 			local to buffer
-- 	Copy indent from current line when starting a new line (typing <CR>
-- 	in Insert mode or when using the "o" or "O" command).  If you do not
-- 	type anything on the new line except <BS> or CTRL-D and then type
-- 	<Esc>, CTRL-O or <CR>, the indent is deleted again.  Moving the cursor
-- 	to another line has the same effect, unless the 'I' flag is included
-- 	in 'cpoptions'.
-- 	When autoindent is on, formatting (with the "gq" command or when you
-- 	reach 'textwidth' in Insert mode) uses the indentation of the first
-- 	line.
-- 	When 'smartindent' or 'cindent' is on the indent is changed in
-- 	a different way.
-- 	The 'autoindent' option is reset when the 'paste' option is set and
-- 	restored when 'paste' is reset.
-- 	{small difference from Vi: After the indent is deleted when typing
-- 	<Esc> or <CR>, the cursor position when moving up or down is after the
-- 	deleted indent; Vi puts the cursor somewhere in the deleted indent}.
vim.bo.autoindent = "true"
-- boolean	(default off)
-- 			local to buffer
-- 	Copy the structure of the existing lines indent when autoindenting a
-- 	new line.  Normally the new indent is reconstructed by a series of
-- 	tabs followed by spaces as required (unless |'expandtab'| is enabled,
-- 	in which case only spaces are used).  Enabling this option makes the
-- 	new line copy whatever characters were used for indenting on the
-- 	existing line.  'expandtab' has no effect on these characters, a Tab
-- 	remains a Tab.  If the new indent is greater than on the existing
-- 	line, the remaining space is filled in the normal manner.
-- 	See 'preserveindent'.
vim.bo.copyindent = "false"
-- boolean	(default off)
-- 			local to buffer
-- 	Do smart autoindenting when starting a new line.  Works for C-like
-- 	programs, but can also be used for other languages.  'cindent' does
-- 	something like this, works better in most cases, but is more strict,
-- 	see |C-indenting|.  When 'cindent' is on or 'indentexpr' is set,
-- 	setting 'si' has no effect.  'indentexpr' is a more advanced
-- 	alternative.
-- 	Normally 'autoindent' should also be on when using 'smartindent'.
-- 	An indent is automatically inserted:
-- 	- After a line ending in '{'.
-- 	- After a line starting with a keyword from 'cinwords'.
-- 	- Before a line starting with '}' (only with the "O" command).
-- 	When typing '}' as the first character in a new line, that line is
-- 	given the same indent as the matching '{'.
-- 	When typing '#' as the first character in a new line, the indent for
-- 	that line is removed, the '#' is put in the first column.  The indent
-- 	is restored for the next line.  If you don't want this, use this
-- 	mapping: ":inoremap # X^H#", where ^H is entered with CTRL-V CTRL-H.
-- 	When using the ">>" command, lines starting with '#' are not shifted
-- 	right.
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
vim.bo.smartindent = "false"
-- number	(default 1000)
-- 			global or local to buffer |global-local|
-- 	Maximum number of changes that can be undone.  Since undo information
-- 	is kept in memory, higher numbers will cause more memory to be used
-- 	(nevertheless, a single change can use an unlimited amount of memory).
-- 	Set to 0 for Vi compatibility: One level of undo and "u" undoes
-- 	itself: >
-- 		set ul=0
-- <	But you can also get Vi compatibility by including the 'u' flag in
-- 	'cpoptions', and still be able to use CTRL-R to repeat undo.
-- 	Also see |undo-two-ways|.
-- 	Set to -1 for no undo at all.  You might want to do this only for the
-- 	current buffer: >
-- 		setlocal ul=-1
-- <	This helps when you run out of memory for a single change.
vim.bo.undolevels = "1000"
-- string	(default: empty)
-- 			local to buffer
-- 	This option specifies a function to be used for Insert mode omni
-- 	completion with CTRL-X CTRL-O. |i_CTRL-X_CTRL-O|
-- 	See |complete-functions| for an explanation of how the function is
-- 	invoked and what it should return.
-- 	This option is usually set by a filetype plugin:
-- 	|:filetype-plugin-on|
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.omnifunc = ""
-- string	(default "")
-- 			local to buffer
-- 	Expression to be used to transform the string found with the 'include'
-- 	option to a file name.  Mostly useful to change "." to "/" for Java: >
-- 		:set includeexpr=substitute(v:fname,'\\.','/','g')
-- <	The "v:fname" variable will be set to the file name that was detected.
vim.bo.includeexpr = ""
-- boolean	(default off)
-- 			global
-- 			{only for Windows}
-- 	Enable reading and writing from devices.  This may get Vim stuck on a
-- 	device that can be opened but doesn't actually do the I/O.  Therefore
-- 	it is off by default.
-- 	Note that on Windows editing "aux.h", "lpt1.txt" and the like also
-- 	result in editing a device.
vim.o.opendevice = "false"
-- string	(default: empty)
-- 			global
-- 	This option specifies a function to be called by the |g@| operator.
-- 	See |:map-operator| for more info and an example.
vim.o.operatorfunc = ""
-- string	(default: see 'runtimepath')
-- 	Directories used to find packages.  See |packages|.
vim.o.packpath = "/home/sindrets/.config/nvim,/etc/xdg/nvim,/home/sindrets/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/share/nvim/runtime,/usr/local/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/sindrets/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/sindrets/.config/nvim/after"
-- string	(default "IPLPPPQPP TPHPLIPpLpItpplpipbp")
-- 			global
-- 	Specifies the nroff macros that separate paragraphs.  These are pairs
-- 	of two letters (see |object-motions|).
vim.o.paragraphs = "IPLPPPQPP TPHPLIPpLpItpplpipbp"
-- string	(default "")
-- 			global
-- 	When non-empty, specifies the key sequence that toggles the 'paste'
-- 	option.  This is like specifying a mapping: >
-- 	    :map {keys} :set invpaste<CR>
-- <	Where {keys} is the value of 'pastetoggle'.
-- 	The difference is that it will work even when 'paste' is set.
-- 	'pastetoggle' works in Insert mode and Normal mode, but not in
-- 	Command-line mode.
-- 	Mappings are checked first, thus overrule 'pastetoggle'.  However,
-- 	when 'paste' is on mappings are ignored in Insert mode, thus you can do
-- 	this: >
-- 	    :map <F10> :set paste<CR>
-- 	    :map <F11> :set nopaste<CR>
-- 	    :imap <F10> <C-O>:set paste<CR>
-- 	    :imap <F11> <nop>
-- 	    :set pastetoggle=<F11>
-- <	This will make <F10> start paste mode and <F11> stop paste mode.
-- 	Note that typing <F10> in paste mode inserts "<F10>", since in paste
-- 	mode everything is inserted literally, except the 'pastetoggle' key
-- 	sequence.
-- 	No timeout is used, this means that a multi-key 'pastetoggle' can not
-- 	be triggered manually.
vim.o.pastetoggle = ""
-- string	(default "")
-- 			global
-- 	Expression which is evaluated to apply a patch to a file and generate
-- 	the resulting new version of the file.  See |diff-patchexpr|.
vim.o.patchexpr = ""
-- string	(default "")
-- 			global
-- 	When non-empty the oldest version of a file is kept.  This can be used
-- 	to keep the original version of a file if you are changing files in a
-- 	source distribution.  Only the first time that a file is written a
-- 	copy of the original file will be kept.  The name of the copy is the
-- 	name of the original file with the string in the 'patchmode' option
-- 	appended.  This option should start with a dot.  Use a string like
-- 	".orig" or ".org".  'backupdir' must not be empty for this to work
-- 	(Detail: The backup file is renamed to the patchmode file after the
-- 	new file has been successfully written, that's why it must be possible
-- 	to write a backup file).  If there was no file to be backed up, an
-- 	empty file is created.
-- 	When the 'backupskip' pattern matches, a patchmode file is not made.
-- 	Using 'patchmode' for compressed files appends the extension at the
-- 	end (e.g., "file.gz.orig"), thus the resulting name isn't always
-- 	recognized as a compressed file.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.o.patchmode = ""
-- boolean	(default off)
-- 			global
-- 	When on, the OS function fsync() will be called after saving a file
-- 	(|:write|, |writefile()|, …), |swap-file| and |shada-file|. This
-- 	flushes the file to disk, ensuring that it is safely written.
-- 	Slow on some systems: writing buffers, quitting Nvim, and other
-- 	operations may sometimes take a few seconds.
vim.o.fsync = "false"
-- boolean	(default off)
-- 			global
-- 	When on, the ":substitute" flag 'g' is default on.  This means that
-- 	all matches in a line are substituted instead of one.  When a 'g' flag
-- 	is given to a ":substitute" command, this will toggle the substitution
-- 	of all or one match.  See |complex-change|.
vim.o.gdefault = "false"
-- string	(default "%f:%l:%m,%f:%l%m,%f  %l%m")
-- 			global
-- 	Format to recognize for the ":grep" command output.
-- 	This is a scanf-like string that uses the same format as the
-- 	'errorformat' option: see |errorformat|.
vim.o.grepformat = "%f:%l:%m,%f:%l%m,%f  %l%m"
-- string	(default empty, except for some systems)
-- 			global
-- 	Sets the character encoding used when printing.
-- 	See |penc-option|.
vim.o.printencoding = ""
-- string	(default "grep -n ",
-- 				 Unix: "grep -n $* /dev/null")
-- 			global or local to buffer |global-local|
-- 	Program to use for the |:grep| command.  This option may contain '%'
-- 	and '#' characters, which are expanded like when used in a command-
-- 	line.  The placeholder "$*" is allowed to specify where the arguments
-- 	will be included.  Environment variables are expanded |:set_env|.  See
-- 	|option-backslash| about including spaces and backslashes.
-- 	When your "grep" accepts the "-H" argument, use this to make ":grep"
-- 	also work well with a single file: >
-- 		:set grepprg=grep\ -nH
-- <	Special value: When 'grepprg' is set to "internal" the |:grep| command
-- 	works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like
-- 	|:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.
-- 	See also the section |:make_makeprg|, since most of the comments there
-- 	apply equally to 'grepprg'.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.grepprg = "grep -n $* /dev/null"
-- string	(default: see below)
-- 			global
-- 	Expression used to print the PostScript produced with |:hardcopy|.
-- 	See |pexpr-option|.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.printexpr = "system(['lpr'] + (empty(&printdevice)?[]:['-P', &printdevice]) + [v:fname_in]). delete(v:fname_in)+ v:shell_error"
-- string	(default "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20")
-- 			global
-- 	Configures the cursor style for each mode. Works in the GUI and many
-- 	terminals.  See |tui-cursor-shape|.
vim.o.guicursor = "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20"
-- string	(default "courier")
-- 			global
-- 	The name of the font that will be used for |:hardcopy|.
-- 	See |pfn-option|.
vim.o.printfont = "courier"
-- string	(default "")
-- 			global
-- 	This is a list of fonts which will be used for the GUI version of Vim.
-- 	In its simplest form the value is just one font name.  When
-- 	the font cannot be found you will get an error message.  To try other
-- 	font names a list can be specified, font names separated with commas.
-- 	The first valid font is used.
vim.o.guifont = ""
-- string  (default "%<%f%h%m%=Page %N")
-- 			global
-- 	The format of the header produced in |:hardcopy| output.
-- 	See |pheader-option|.
vim.o.printheader = "%<%f%h%m%=Page %N"
-- string	(default "")
-- 			global
-- 	When not empty, specifies a comma-separated list of fonts to be used
-- 	for double-width characters.  The first font that can be loaded is
-- 	used.
-- 	Note: The size of these fonts must be exactly twice as wide as the one
-- 	specified with 'guifont' and the same height.
vim.o.guifontwide = ""
-- string	(default "egmrLT"   (MS-Windows))
-- 			global
-- 	This option only has an effect in the GUI version of Vim.  It is a
-- 	sequence of letters which describes what components and options of the
-- 	GUI should be used.
-- 	To avoid problems with flags that are added in the future, use the
-- 	"+=" and "-=" feature of ":set" |add-option-flags|.
vim.o.guioptions = ""
-- string	(default empty)
-- 			global
-- 	When nonempty describes the text to use in a label of the GUI tab
-- 	pages line.  When empty and when the result is empty Vim will use a
-- 	default label.  See |setting-guitablabel| for more info.
vim.o.guitablabel = ""
-- string (default "")
-- 			global
-- 	List of font names to be used for CJK output from |:hardcopy|.
-- 	See |pmbfn-option|.
vim.o.printmbfont = ""
-- string	(default empty)
-- 			global
-- 	When nonempty describes the text to use in a tooltip for the GUI tab
-- 	pages line.  When empty Vim will use a default tooltip.
-- 	This option is otherwise just like 'guitablabel' above.
-- 	You can include a line break.  Simplest method is to use |:let|: >
-- 		:let &guitabtooltip = "line one\nline two"
-- <
vim.o.guitabtooltip = ""
-- string (default "")
-- 			global
-- 	List of items that control the format of the output of |:hardcopy|.
-- 	See |popt-option|.
vim.o.printoptions = ""
-- string	(default (MSDOS)  "$VIMRUNTIME\doc\help.txt"
-- 					 (others) "$VIMRUNTIME/doc/help.txt")
-- 			global
-- 	Name of the main help file.  All distributed help files should be
-- 	placed together in one directory.  Additionally, all "doc" directories
-- 	in 'runtimepath' will be used.
-- 	Environment variables are expanded |:set_env|.  For example:
-- 	"$VIMRUNTIME/doc/help.txt".  If $VIMRUNTIME is not set, $VIM is also
-- 	tried.  Also see |$VIMRUNTIME| and |option-backslash| about including
-- 	spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.helpfile = "/usr/local/share/nvim/runtime/doc/help.txt"
-- boolean	(default on)
-- 			global
-- 	When on a ":" prompt is used in Ex mode.
vim.o.prompt = "true"
-- number	(default 0)
-- 			global
-- 	Enables pseudo-transparency for the |popup-menu|. Valid values are in
-- 	the range of 0 for fully opaque popupmenu (disabled) to 100 for fully
-- 	transparent background. Values between 0-30 are typically most useful.
vim.o.pumblend = "0"
-- number	(default 20)
-- 			global
-- 	Minimal initial height of the help window when it is opened with the
-- 	":help" command.  The initial height of the help window is half of the
-- 	current window, or (when the 'ea' option is on) the same as other
-- 	windows.  When the height is less than 'helpheight', the height is
-- 	set to 'helpheight'.  Set to zero to disable.
vim.o.helpheight = "20"
-- string	(default "")
-- 			global
-- 	These values can be used:
-- 	msg	Error messages that would otherwise be omitted will be given
-- 		anyway.
-- 	throw	Error messages that would otherwise be omitted will be given
-- 		anyway and also throw an exception and set |v:errmsg|.
-- 	beep	A message will be given when otherwise only a beep would be
-- 		produced.
-- 	The values can be combined, separated by a comma.
-- 	"msg" and "throw" are useful for debugging 'foldexpr', 'formatexpr' or
-- 	'indentexpr'.
vim.o.debug = ""
-- string	(default: messages language or empty)
-- 			global
-- 	Comma separated list of languages.  Vim will use the first language
-- 	for which the desired help can be found.  The English help will always
-- 	be used as a last resort.  You can add "en" to prefer English over
-- 	another language, but that will only find tags that exist in that
-- 	language and not in the English help.
-- 	Example: >
-- 		:set helplang=de,it
-- <	This will first search German, then Italian and finally English help
-- 	files.
-- 	When using |CTRL-]| and ":help!" in a non-English help file Vim will
-- 	try to find the tag in the current language before using this option.
-- 	See |help-translated|.
vim.o.helplang = ""
-- number	(default 15)
-- 			global
-- 	Minimum width for the popup menu (|ins-completion-menu|).  If the
-- 	cursor column + 'pumwidth' exceeds screen width, the popup menu is
-- 	nudged to fit on the screen.
vim.o.pumwidth = "15"
-- boolean	(default off)
-- 			global
-- 	When off a buffer is unloaded when it is |abandon|ed.  When on a
-- 	buffer becomes hidden when it is |abandon|ed.  If the buffer is still
-- 	displayed in another window, it does not become hidden, of course.
-- 	The commands that move through the buffer list sometimes make a buffer
-- 	hidden although the 'hidden' option is off: When the buffer is
-- 	modified, 'autowrite' is off or writing is not possible, and the '!'
-- 	flag was used.  See also |windows.txt|.
-- 	To only make one buffer hidden use the 'bufhidden' option.
-- 	This option is set for one command with ":hide {command}" |:hide|.
-- 	WARNING: It's easy to forget that you have changes in hidden buffers.
-- 	Think twice when using ":q!" or ":qa!".
vim.o.hidden = "true"
-- number	(default depends on the build)
-- 			global
-- 	Specifies the python version used for pyx* functions and commands
-- 	|python_x|.  The default value is as follows:
vim.o.pyxversion = "3"
vim.o.quickfixtextfunc = ""
-- number	(Vim default: 10000, Vi default: 0)
-- 			global
-- 	A history of ":" commands, and a history of previous search patterns
-- 	is remembered.  This option decides how many entries may be stored in
-- 	each of these histories (see |cmdline-editing|).
-- 	The maximum value is 10000.
vim.o.history = "10000"
-- boolean (default off)
-- 			global
-- 	When on, the keyboard is mapped for the Hebrew character set.
-- 	Normally you would set 'allowrevins' and use CTRL-_ in insert mode to
-- 	toggle this option.  See |rileft.txt|.
vim.o.hkmap = "false"
-- boolean (default off)
-- 			global
-- 	When on, phonetic keyboard mapping is used.  'hkmap' must also be on.
-- 	This is useful if you have a non-Hebrew keyboard.
-- 	See |rileft.txt|.
vim.o.hkmapp = "false"
-- boolean	(default on)
-- 			global
-- 	When there is a previous search pattern, highlight all its matches.
-- 	The |hl-Search| highlight group determines the highlighting. Note that
-- 	only the matching text is highlighted, any offsets are not applied.
-- 	See also: 'incsearch' and |:match|.
-- 	When you get bored looking at the highlighted matches, you can turn it
-- 	off with |:nohlsearch|.  This does not change the option value, as
-- 	soon as you use a search command, the highlighting comes back.
-- 	'redrawtime' specifies the maximum time spent on finding matches.
-- 	When the search pattern can match an end-of-line, Vim will try to
-- 	highlight all of the matched text.  However, this depends on where the
-- 	search starts.  This will be the first line in the window or the first
-- 	line below a closed fold.  A match in a previous line which is not
-- 	drawn may not continue in a newly drawn line.
-- 	You can specify whether the highlight status is restored on startup
-- 	with the 'h' flag in 'shada' |shada-h|.
vim.o.hlsearch = "true"
-- boolean	(default off, on when title can be restored)
-- 			global
-- 	When on, the icon text of the window will be set to the value of
-- 	'iconstring' (if it is not empty), or to the name of the file
-- 	currently being edited.  Only the last part of the name is used.
-- 	Overridden by the 'iconstring' option.
-- 	Only works if the terminal supports setting window icons.
vim.o.icon = "false"
-- string	(default "")
-- 			global
-- 	When this option is not empty, it will be used for the icon text of
-- 	the window.  This happens only when the 'icon' option is on.
-- 	Only works if the terminal supports setting window icon text
-- 	When this option contains printf-style '%' items, they will be
-- 	expanded according to the rules used for 'statusline'.  See
-- 	'titlestring' for example settings.
-- 	This option cannot be set in a modeline when 'modelineexpr' is off.
vim.o.iconstring = ""
-- boolean	(default off)
-- 			global
-- 	Ignore case in search patterns.  Also used when searching in the tags
-- 	file.
-- 	Also see 'smartcase' and 'tagcase'.
-- 	Can be overruled by using "\c" or "\C" in the pattern, see
-- 	|/ignorecase|.
vim.o.ignorecase = "false"
-- boolean (default off)
-- 			global
-- 	When set the Input Method is always on when starting to edit a command
-- 	line, unless entering a search pattern (see 'imsearch' for that).
-- 	Setting this option is useful when your input method allows entering
-- 	English characters directly, e.g., when it's used to type accented
-- 	characters with dead keys.
vim.o.imcmdline = "false"
-- boolean (default off, on for some systems (SGI))
-- 			global
-- 	When set the Input Method is never used.  This is useful to disable
-- 	the IM when it doesn't work properly.
-- 	Currently this option is on by default for SGI/IRIX machines.  This
-- 	may change in later releases.
vim.o.imdisable = "false"
-- number	(default 2)
-- 			global
-- 	Threshold for reporting number of lines changed.  When the number of
-- 	changed lines is more than 'report' a message will be given for most
-- 	":" commands.  If you want it always, set 'report' to 0.
-- 	For the ":substitute" command the number of substitutions is used
-- 	instead of the number of lines.
vim.o.report = "2"
-- boolean	(default off)
-- 			global
-- 	Inserting characters in Insert mode will work backwards.  See "typing
-- 	backwards" |ins-reverse|.  This option can be toggled with the CTRL-_
-- 	command in Insert mode, when 'allowrevins' is set.
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
vim.o.revins = "false"
-- string	(default "")
-- 			global
vim.o.inccommand = "nosplit"
-- number	(default 1)
-- 			global
-- 	The minimal width of a window, when it's not the current window.
-- 	This is a hard minimum, windows will never become smaller.
-- 	When set to zero, windows may be "squashed" to zero columns (i.e. just
-- 	a vertical separator) if necessary.  They will return to at least one
-- 	line when they become active (since the cursor has to have somewhere
-- 	to go.)
-- 	Use 'winwidth' to set the minimal width of the current window.
-- 	This option is only checked when making a window smaller.  Don't use a
-- 	large number, it will cause errors when opening more than a few
-- 	windows.  A value of 0 to 12 is reasonable.
vim.o.winminwidth = "1"
-- string	(default "^\s*#\s*include")
-- 			global or local to buffer |global-local|
-- 	Pattern to be used to find an include command.  It is a search
-- 	pattern, just like for the "/" command (See |pattern|).  The default
-- 	value is for C programs.  This option is used for the commands "[i",
-- 	"]I", "[d", etc.
-- 	Normally the 'isfname' option is used to recognize the file name that
-- 	comes after the matched pattern.  But if "\zs" appears in the pattern
-- 	then the text matched from "\zs" to the end, or until "\ze" if it
-- 	appears, is used as the file name.  Use this to include characters
-- 	that are not in 'isfname', such as a space.  You can then use
-- 	'includeexpr' to process the matched text.
-- 	See |option-backslash| about including spaces and backslashes.
vim.o.include = "^\\s*#\\s*include"
-- number	(default 20)
-- 			global
-- 	Minimal number of columns for the current window.  This is not a hard
-- 	minimum, Vim will use fewer columns if there is not enough room.  If
-- 	the current window is smaller, its size is increased, at the cost of
-- 	the width of other windows.  Set it to 999 to make the current window
-- 	always fill the screen.  Set it to a small number for normal editing.
-- 	The width is not adjusted after one of the commands to change the
-- 	width of the current window.
-- 	'winwidth' applies to the current window.  Use 'winminwidth' to set
-- 	the minimal width for other windows.
vim.o.winwidth = "20"
-- string	(default empty)
-- 			global
-- 	When this option is not empty, it determines the content of the ruler
-- 	string, as displayed for the 'ruler' option.
-- 	The format of this option is like that of 'statusline'.
-- 	This option cannot be set in a modeline when 'modelineexpr' is off.
vim.o.rulerformat = ""
-- string	(default:     "$XDG_CONFIG_HOME/nvim,
-- 					       $XDG_CONFIG_DIRS[1]/nvim,
-- 					       $XDG_CONFIG_DIRS[2]/nvim,
-- 					       …
-- 					       $XDG_DATA_HOME/nvim[-data]/site,
-- 					       $XDG_DATA_DIRS[1]/nvim/site,
-- 					       $XDG_DATA_DIRS[2]/nvim/site,
-- 					       …
-- 					       $VIMRUNTIME,
-- 					       …
-- 					       $XDG_DATA_DIRS[2]/nvim/site/after,
-- 					       $XDG_DATA_DIRS[1]/nvim/site/after,
-- 					       $XDG_DATA_HOME/nvim[-data]/site/after,
-- 					       …
-- 					       $XDG_CONFIG_DIRS[2]/nvim/after,
-- 					       $XDG_CONFIG_DIRS[1]/nvim/after,
-- 					       $XDG_CONFIG_HOME/nvim/after")
-- 			global
-- 	List of directories to be searched for these runtime files:
-- 	  filetype.vim	filetypes by file name |new-filetype|
-- 	  scripts.vim	filetypes by file contents |new-filetype-scripts|
-- 	  autoload/	automatically loaded scripts |autoload-functions|
-- 	  colors/	color scheme files |:colorscheme|
-- 	  compiler/	compiler files |:compiler|
-- 	  doc/		documentation |write-local-help|
-- 	  ftplugin/	filetype plugins |write-filetype-plugin|
-- 	  indent/	indent scripts |indent-expression|
-- 	  keymap/	key mapping files |mbyte-keymap|
-- 	  lang/		menu translations |:menutrans|
-- 	  menu.vim	GUI menus |menu.vim|
-- 	  pack/		packages |:packadd|
-- 	  plugin/	plugin scripts |write-plugin|
-- 	  print/	files for printing |postscript-print-encoding|
-- 	  rplugin/	|remote-plugin| scripts
-- 	  spell/	spell checking files |spell|
-- 	  syntax/	syntax files |mysyntaxfile|
-- 	  tutor/	tutorial files |:Tutor|
vim.o.runtimepath = "/home/sindrets/.config/nvim,/etc/xdg/nvim,/home/sindrets/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/share/nvim/runtime,/usr/local/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/home/sindrets/.local/share/nvim/site/after,/etc/xdg/nvim/after,/home/sindrets/.config/nvim/after"
-- boolean	(default on)
-- 			global
-- 	While typing a search command, show where the pattern, as it was typed
-- 	so far, matches.  The matched string is highlighted.  If the pattern
-- 	is invalid or not found, nothing is shown.  The screen will be updated
-- 	often, this is only useful on fast terminals.
-- 	Note that the match will be shown, but the cursor will return to its
-- 	original position when no match is found and when pressing <Esc>.  You
-- 	still need to finish the search command with <Enter> to move the
-- 	cursor to the match.
-- 	You can use the CTRL-G and CTRL-T keys to move to the next and
-- 	previous match. |c_CTRL-G| |c_CTRL-T|
-- 	Vim only searches for about half a second.  With a complicated
-- 	pattern and/or a lot of text the match may not be found.  This is to
-- 	avoid that Vim hangs while you are typing the pattern.
-- 	The |hl-IncSearch| highlight group determines the highlighting.
-- 	When 'hlsearch' is on, all matched strings are highlighted too while
-- 	typing a search command. See also: 'hlsearch'.
-- 	If you don't want to turn 'hlsearch' on, but want to highlight all
-- 	matches while searching, you can turn on and off 'hlsearch' with
-- 	autocmd.  Example: >
-- 		augroup vimrc-incsearch-highlight
-- 		  autocmd!
-- 		  autocmd CmdlineEnter /,\? :set hlsearch
-- 		  autocmd CmdlineLeave /,\? :set nohlsearch
-- 		augroup END
-- <
-- 	CTRL-L can be used to add one character from after the current match
-- 	to the command line.  If 'ignorecase' and 'smartcase' are set and the
-- 	command line has no uppercase characters, the added character is
-- 	converted to lowercase.
-- 	CTRL-R CTRL-W can be used to add the word at the end of the current
-- 	match, excluding the characters that were already typed.
vim.o.incsearch = "true"
-- boolean	(default off)
-- 			global
-- 	Allows writing to any file with no need for "!" override.
vim.o.writeany = "false"
-- boolean	(default on with |+writebackup| feature, off
-- 					otherwise)
-- 			global
-- 	Make a backup before overwriting a file.  The backup is removed after
-- 	the file was successfully written, unless the 'backup' option is
-- 	also on.
-- 	WARNING: Switching this option off means that when Vim fails to write
-- 	your buffer correctly and then, for whatever reason, Vim exits, you
-- 	lose both the original file and what you were writing.  Only reset
-- 	this option if your file system is almost full and it makes the write
-- 	fail (and make sure not to exit Vim until the write was successful).
-- 	See |backup-table| for another explanation.
-- 	When the 'backupskip' pattern matches, a backup is not made anyway.
vim.o.writebackup = "true"
-- number	(default 0)
-- 			global
-- 	The number of milliseconds to wait for each character sent to the
-- 	screen.  When positive, characters are sent to the UI one by one.
-- 	See 'redrawdebug' for more options.  For debugging purposes.
vim.o.writedelay = "0"
-- number	(default 1)
-- 			global
-- 	Minimal number of lines to scroll when the cursor gets off the
-- 	screen (e.g., with "j").  Not used for scroll commands (e.g., CTRL-E,
-- 	CTRL-D).  Useful if your terminal scrolls very slowly.
-- 	When set to a negative number from -1 to -100 this is used as the
-- 	percentage of the window height.  Thus -50 scrolls half the window
-- 	height.
vim.o.scrolljump = "1"
-- boolean	(default off)
-- 			global
-- 	Makes Vim work in a way that Insert mode is the default mode.  Useful
-- 	if you want to use Vim as a modeless editor.
-- 	These Insert mode commands will be useful:
-- 	- Use the cursor keys to move around.
-- 	- Use CTRL-O to execute one Normal mode command |i_CTRL-O|.  When
-- 	  this is a mapping, it is executed as if 'insertmode' was off.
-- 	  Normal mode remains active until the mapping is finished.
-- 	- Use CTRL-L to execute a number of Normal mode commands, then use
-- 	  <Esc> to get back to Insert mode.  Note that CTRL-L moves the cursor
-- 	  left, like <Esc> does when 'insertmode' isn't set.  |i_CTRL-L|
vim.o.insertmode = "false"
-- number	(default 0)
-- 			global or local to window |global-local|
-- 	Minimal number of screen lines to keep above and below the cursor.
-- 	This will make some context visible around where you are working.  If
-- 	you set it to a very large value (999) the cursor line will always be
-- 	in the middle of the window (except at the start or end of the file or
-- 	when long lines wrap).
-- 	After using the local value, go back the global value with one of
-- 	these two: >
-- 		setlocal scrolloff<
-- 		setlocal scrolloff=-1
-- <	For scrolling horizontally see 'sidescrolloff'.
vim.o.scrolloff = "0"
-- string	(default for Windows:
-- 			     "@,48-57,/,\,.,-,_,+,,,#,$,%,{,},[,],:,@-@,!,~,="
-- 			    otherwise: "@,48-57,/,.,-,_,+,,,#,$,%,~,=")
-- 			global
-- 	The characters specified by this option are included in file names and
-- 	path names.  Filenames are used for commands like "gf", "[i" and in
-- 	the tags file.  It is also used for "\f" in a |pattern|.
-- 	Multi-byte characters 256 and above are always included, only the
-- 	characters up to 255 are specified with this option.
-- 	For UTF-8 the characters 0xa0 to 0xff are included as well.
-- 	Think twice before adding white space to this option.  Although a
-- 	space may appear inside a file name, the effect will be that Vim
-- 	doesn't know where a file name starts or ends when doing completion.
-- 	It most likely works better without a space in 'isfname'.
vim.o.isfname = "@,48-57,/,.,-,_,+,,,#,$,%,~,="
-- string	(default "ver,jump")
-- 			global
-- 	This is a comma-separated list of words that specifies how
-- 	'scrollbind' windows should behave.  'sbo' stands for ScrollBind
-- 	Options.
-- 	The following words are available:
-- 	    ver		Bind vertical scrolling for 'scrollbind' windows
-- 	    hor		Bind horizontal scrolling for 'scrollbind' windows
-- 	    jump	Applies to the offset between two windows for vertical
-- 			scrolling.  This offset is the difference in the first
-- 			displayed line of the bound windows.  When moving
-- 			around in a window, another 'scrollbind' window may
-- 			reach a position before the start or after the end of
-- 			the buffer.  The offset is not changed though, when
-- 			moving back the 'scrollbind' window will try to scroll
-- 			to the desired position when possible.
-- 			When now making that window the current one, two
-- 			things can be done with the relative offset:
-- 			1. When "jump" is not included, the relative offset is
-- 			   adjusted for the scroll position in the new current
-- 			   window.  When going back to the other window, the
-- 			   new relative offset will be used.
-- 			2. When "jump" is included, the other windows are
-- 			   scrolled to keep the same relative offset.  When
-- 			   going back to the other window, it still uses the
-- 			   same relative offset.
-- 	Also see |scroll-binding|.
-- 	When 'diff' mode is active there always is vertical scroll binding,
-- 	even when "ver" isn't there.
vim.o.scrollopt = "ver,jump"
-- string	(default for Windows:
-- 					   "@,48-57,_,128-167,224-235"
-- 				otherwise: "@,48-57,_,192-255")
-- 			global
-- 	The characters given by this option are included in identifiers.
-- 	Identifiers are used in recognizing environment variables and after a
-- 	match of the 'define' option.  It is also used for "\i" in a
-- 	|pattern|.  See 'isfname' for a description of the format of this
-- 	option.  For '@' only characters up to 255 are used.
-- 	Careful: If you change this option, it might break expanding
-- 	environment variables.  E.g., when '/' is included and Vim tries to
-- 	expand "$HOME/.local/share/nvim/shada/main.shada".  Maybe you should
-- 	change 'iskeyword' instead.
vim.o.isident = "@,48-57,_,192-255"
-- string	(default "SHNHH HUnhsh")
-- 			global
-- 	Specifies the nroff macros that separate sections.  These are pairs of
-- 	two letters (See |object-motions|).  The default makes a section start
-- 	at the nroff macros ".SH", ".NH", ".H", ".HU", ".nh" and ".sh".
vim.o.sections = "SHNHH HUnhsh"
